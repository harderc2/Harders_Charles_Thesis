#const n = 19.
step(0..n).
next(I, I1) :- step(I), step(I1), I1 = I+1.


action(wait).
%OBJECT DEFINITIONS
%agents that clean
agent(a0).
%rooms that can be cleaned by an agent
room(original). % agents will start in this room always
room(r0).
room(r1).
room(r2).
room(r3).


%FLUENT DEFINITIONS
fluent(inertial, has_Mess(R)) :- room(R).
fluent(inertial, inMeeting(R)) :- room(R). 
fluent(inertial, beenCleaned(R)) :- room(R).
fluent(inertial, used(R)) :- room(R).
fluent(defined, beforeWork).
fluent(defined, slot0).
fluent(defined, slot1).
fluent(defined, slot2).
fluent(defined, slot3).


action(clean(A,R)) :- agent(A), room(R).

%AXIOMS
                          
holds(inMeeting(R), I1) :- occurs(start_Meeting(R),I),
                              I < n,
                              next(I,I1).
holds(beenCleaned(R), I1) :- agent(A), occurs(clean(A,R),I),
                              I < n,
                              next(I,I1).
holds(used(R), I1) :- occurs(start_Meeting(R),I),
                              I < n,
                              next(I,I1).
holds(used(R), I1) :- occurs(mess_Occurs(R),I),
                              I < n,
                              next(I,I1).

-holds(F, 0) :- fluent(inertial, F),
                not holds(F, 0). 

% GENERAL INERTIA AXIOMS FOR INERTIAL FLUENTS:

holds(F,I1) :- fluent(inertial,F),
               holds(F,I),                  
               not -holds(F,I1),
               I < n,
               next(I, I1).

-holds(F,I1) :- fluent(inertial,F),
                        -holds(F,I),                
                not holds(F,I1),
                I < n,
                next(I, I1).
% defined fluents

-holds(F, I) :- fluent(defined, F),
                step(I),
                not holds(F, I).

%POLICY DEFINITIONS


%Strict Non-Auth - not permitted to clean before work starts
-permitted(clean(A,R), I) :- room(R), agent(A), step(I),
                      holds(beforeWork, I).


%Strict Obl - obligated to clean when there is a mess
obl(clean(A,R), I) :- step(I), agent(A),
                      holds(has_Mess(R), I).
                      
%Defeasible Auth - permitted to clean once a day
permitted(clean(A,R), I) :- room(R), agent(A), step(I),
                      -holds(beenCleaned(R), I),
                      not -permitted(clean(A,R), I),
                      not obl_not(clean(A,R), I).
                                    
%Defeasible Non-Auth - not permitted to clean during a meeting
-permitted(clean(A,R), I) :- room(R), agent(A), step(I),
                      holds(inMeeting(R), I),
                      not permitted(clean(A,R), I),
                      not obl(clean(A,R), I).


exception(d0, I) :-  holds(inMeeting(r0), I), step(I),
      -holds(has_Mess(r0), I).
exception(d1, I) :-  holds(inMeeting(r1), I), step(I),
      -holds(has_Mess(r1), I).
exception(d2, I) :-  holds(inMeeting(r2), I), step(I),
      -holds(has_Mess(r2), I).
exception(d3, I) :-  holds(inMeeting(r3), I), step(I),
      -holds(has_Mess(r3), I).

%Defeasible Obl - obligated to clean room 0 during its slot
obl(clean(A,r0), I) :- step(I), agent(A),
                  holds(slot0, I),
             	not exception(d0, I),
			-holds(beenCleaned(r0), I),
                  not -permitted(clean(A,r0), I),
         		not obl_not(clean(A,r0), I).
%Defeasible Obl - obligated to clean room 1 during its slot
obl(clean(A,r1), I) :- step(I), agent(A),
                  holds(slot1, I),
             	not exception(d1, I),
			-holds(beenCleaned(r1), I),
                  not -permitted(clean(A,r1), I),
         		not obl_not(clean(A,r1), I).
%Defeasible Obl - obligated to clean room 2 during its slot
obl(clean(A,r2), I) :- step(I), agent(A),
                  holds(slot2, I),
             	not exception(d2, I),
			-holds(beenCleaned(r2), I),
                  not -permitted(clean(A,r2), I),
         		not obl_not(clean(A,r2), I).
%Defeasible Obl - obligated to clean room 3 during its slot
obl(clean(A,r3), I) :- step(I), agent(A),
                  holds(slot3, I),
             	not exception(d3, I),
			-holds(beenCleaned(r3), I),
                  not -permitted(clean(A,r3), I),
         		not obl_not(clean(A,r3), I).

%KNOWN FACTS ABOUT TRAJECTORY

holds(beforeWork, I) :- step(I), I >= 0, I < 4.
holds(slot0, I) :- step(I), I < 8, I >= 4.
holds(slot1, I) :- step(I), I < 12, I >= 8.
holds(slot2, I) :- step(I), I < 16, I >= 12.
holds(slot3, I) :- step(I), I >= 16.

non_obl_compl(A, I) :- obl(A, I), not occurs(A, I).
non_obl_compl(A, I) :- obl_not(A, I), occurs(A, I).
num_non_obl_compl(N) :- #count{A, I : non_obl_compl(A, I)} = N.
:- num_non_obl_compl(N), N != 0.


n_perm(A,I) :- -permitted(A,I), occurs(A,I).
c_n_perm(N) :- #count{A: n_perm(A,I)} = N.
:- c_n_perm(N), N != 0.


holds(has_mess(r1), 0).
holds(inMeeting(r1), 5).
occurs(clean(a0, r1), 6).


#show holds/2.